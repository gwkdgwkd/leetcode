第338题

1.描述
给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。
示例 1:
输入: 2
输出: [0,1,1]
示例 2:
输入: 5
输出: [0,1,1,2,1,2]
进阶:
    给出时间复杂度为O(n*sizeof(integer))的解答非常容易。但你可以在线性时间O(n)内用一趟扫描做到吗？
    要求算法的空间复杂度为O(n)。
    你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount）来执行此操作。

2.思路
奇数和偶数分开来看,
对每一个偶数2n，二进制的最后一位肯定是零，相当于把n左移一位，所以2n的零的个数就等于n的零的个数。
而对每一个奇数2n+1，二进制的最后一位肯定是1，相当于在2n的基础上加一，所以二进制的1的个数就等于2n的1的个数加1，就有了动态规划。
