/*
给两个正整数n和m。
现定义两个整数num1和num2，如下所示：
num1：范围[1, n]内所有无法被m整除的整数之和。
num2：范围[1, n]内所有能够被m整除的整数之和。
返回整数num1 - num2。

示例1：
输入：n = 10, m = 3
输出：19
解释：在这个示例中：
     范围[1,10]内无法被3整除的整数为[1,2,4,5,7,8,10]，num1=这些整数之和=37。
     范围[1,10]内能够被3整除的整数为[3,6,9]，num2=这些整数之和=18。
     返回37-18=19作为答案。

示例2：
输入：n = 5, m = 6
输出：15
解释：在这个示例中：
     范围[1, 5]内无法被6整除的整数为[1,2,3,4,5]，num1=这些整数之和=15。
     范围[1, 5]内能够被6整除的整数为[]，num2=这些整数之和=0。
     返回15-0=15作为答案。

示例3：
输入：n = 5, m = 1
输出：-15
解释：在这个示例中：
     范围[1,5]内无法被1整除的整数为[]，num1=这些整数之和=0。
     范围[1,5]内能够被1整除的整数为[1,2,3,4,5]，num2=这些整数之和=15。
     返回0-15=-15作为答案。


提示：
1 <= n, m <= 1000
*/

class Solution {
 public:
  int differenceOfSums(int n, int m) {
    int ans = 0;
    for (int i = 1; i <= n; ++i) {
      if (i % m) {
        ans += i;
      } else {
        ans -= i;
      }
    }
    return ans;
  }
};

// 数学公式
class Solution {
 public:
  int differenceOfSums(int n, int m) {
    return n * (n + 1) / 2 - n / m * (n / m + 1) * m;
  }
};