/*
给一个下标从0开始的数组nums，数组中有n个整数，另给一个整数k。
半径为k的子数组平均值是指：
nums中一个以下标i为中心且半径为k的子数组中所有元素的平均值，
即下标在i-k和i+k范围（含i-k和i+k）内所有元素的平均值。
如果在下标i前或后不足k个元素，那么半径为k的子数组平均值是-1。
构建长度n的数组avgs，其中avgs[i]是以下标i为中心的子数组的半径为k的子数组平均值。
x个元素的平均值是x个元素之和除以x，使用截断式整数除法，即需要去掉结果的小数部分。

示例1：
输入：nums = [7,4,3,9,1,8,5,2,6], k = 3
输出：[-1,-1,-1,5,4,4,-1,-1,-1]
解释：avg[0]、avg[1]和avg[2]是-1，因为在这几个下标前的元素数量都不足k个。
     中心为下标3且半径为3的子数组的元素总和是：7 + 4 + 3 + 9 + 1 + 8 + 5 = 37。
     使用截断式整数除法，avg[3] = 37 / 7 = 5。
     中心为下标 4 的子数组，avg[4] = (4 + 3 + 9 + 1 + 8 + 5 + 2) / 7 = 4。
     中心为下标 5 的子数组，avg[5] = (3 + 9 + 1 + 8 + 5 + 2 + 6) / 7 = 4。
     avg[6]、avg[7]和avg[8]是-1，因为在这几个下标后的元素数量都不足k个。

示例2：
输入：nums = [100000], k = 0
输出：[100000]
解释：中心为下标0且半径0的子数组的元素总和是：100000。
     avg[0] = 100000 / 1 = 100000。

示例3：
输入：nums = [8], k = 100000
输出：[-1]
解释：-avg[0]是-1，因为在下标0前后的元素数量均不足k。


提示：
n == nums.length
1 <= n <= 105
0 <= nums[i], k <= 10^5
*/

// 相当于一个长为2k+1的滑动窗口。
class Solution {
  // 时间复杂度：O(n)，其中n是nums的长度。
  // 空间复杂度：O(1)，返回值不计入。
 public:
  vector<int> getAverages(vector<int>& nums, int k) {
    int n = nums.size();

    vector<int> avgs(n, -1);
    long long s = 0;
    for (int i = 0; i < n; i++) {
      s += nums[i];
      if (i < k * 2) {
        continue;
      }
      avgs[i - k] = s / (k * 2 + 1);
      s -= nums[i - k * 2];
    }

    return avgs;
  }
};