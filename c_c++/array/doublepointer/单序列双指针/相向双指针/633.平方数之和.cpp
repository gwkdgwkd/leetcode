/*
给定一个非负整数c，要判断是否存在两个整数a和b，使得a^2 + b^2 = c。

示例1：
输入：c = 5
输出：true
解释：1 * 1 + 2 * 2 = 5

示例2：
输入：c = 3
输出：false


提示：
0 <= c <= 2^31 - 1
*/

/*
设k=c。
本题相当于给你一个有序数组[0,1,4,9,16,⋯,k2]，判断是否存在两数之和等于c。
和167.两数之和II-输入有序数组
细节

注意 a 和 b 可以相等。比如 c=2，是两个 1 的平方和，此时 a=b=1。

所以下面代码的循环条件是 a≤b，等号是必要的。


答疑

问：为什么 a2+b2<c 时，可以把 a 加一？不会错过答案吗？

答：原理在视频中讲了。对于本题来说，a2+b2<c 成立，同时还意味着
a2+(b−1)2<c,a2+(b−2)2<c,⋯ 都成立，这意味着 a 和 [a,b] 中的任意整数 b′ 都满足
a2+b′2<c，所以 a2 不可能在两数之和的答案中，移动左指针 a。同理，a2+b2>c
成立，同时还意味着 (a+1)2+b2>c,(a+2)2+b2>c,⋯ 都成立，这意味着 b 和 [a,b]
中的任意整数 a′ 都满足 a′2+b2>c，所以 b2 不可能在两数之和的答案中，移动右指针
b。
*/

// 相向双指针
class Solution {
  // 时间复杂度：O(c​)。
  // 空间复杂度：O(1)。
 public:
  bool judgeSquareSum(int c) {
    int left = 0;
    int right = sqrt(c);
    while (left <= right) {
      int l = left * left;
      int r = right * right;

      // 对于C++等部分语言，如果直接计算a^2+b^2，可能会发生溢出。
      // 本来a^2+b^2>c，溢出后a^2+b^2变成负数，a^2+b^2<c反而成立了，导致错误。
      // 可以把判断条件改为a*a==c-b*b以及a*a<c-b*b，从而避免溢出：
      if (l < c - r) {
        ++left;
      } else if (l > c - r) {
        --right;
      } else {
        return true;
      }
    }
    return false;
  }
};